// a: 00000000000000000000000000000001 - pow2(1)
// b: 00000000000000000000000000000010 - pow2(2)
// c: 00000000000000000000000000000100 - pow2(3)
// d: 00000000000000000000000000001000 - pow2(4)
// e: 00000000000000000000000000010000 - pow2(5)
// f: 00000000000000000000000000100000 - pow2(6)
// g: 00000000000000000000000001000000 - pow2(7)
// h: 00000000000000000000000010000000 - pow2(8)
// i: 00000000000000000000000100000000 - pow2(9)
// j: 00000000000000000000001000000000 - pow2(10)
// k: 00000000000000000000010000000000 - pow2(11)
// l: 00000000000000000000100000000000 - pow2(12)
// m: 00000000000000000001000000000000 - pow2(13)
// n: 00000000000000000010000000000000 - pow2(14)
// o: 00000000000000000100000000000000 - pow2(15)
// p: 00000000000000001000000000000000 - pow2(16)
// q: 00000000000000010000000000000000 - pow2(17)
// r: 00000000000000100000000000000000 - pow2(18)
// s: 00000000000001000000000000000000 - pow2(19)
// t: 00000000000010000000000000000000 - pow2(20)
// u: 00000000000100000000000000000000 - pow2(21)
// v: 00000000001000000000000000000000 - pow2(22)
// w: 00000000010000000000000000000000 - pow2(23)
// x: 00000000100000000000000000000000 - pow2(24)
// y: 00000001000000000000000000000000 - pow2(25)
// z: 00000010000000000000000000000000 - pow2(26)
//    00000011111111111111111111111111 - 67 108 863

// console.log('facit', 0b111);

const pow = (base) => {
    return (exp) => Math.pow(base, exp);
};
const pow2 = pow(2);

const KEYS = new Map();
'abcdefghijklmnopqrstuvwxyz'
    .split('')
    .forEach((chr, idx) => KEYS.set(chr, pow2(idx)));

export class KeyBox {
    constructor(iKeys = 0) {
        this.keys = iKeys;
    }

    get val() {
        return this.keys;
    }

    has(cKey) {
        var iKey = KEYS.get(cKey);
        return (this.keys & iKey) > 0;
    }

    add(cKey) {
        var iKey = KEYS.get(cKey);
        this.keys = this.keys | iKey;
    }
}
