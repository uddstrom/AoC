import { getData, getPath, sum, lcmOfArray } from '../lib/utils.js';

var PUZZLE_INPUT_PATH = `${getPath(import.meta.url)}/${process.argv[2] ?? 'puzzle_input'}`;

function parser(input) {
    var [registers, instr] = input.split('\n\n');
    var [A, B, C] = registers.split('\n').map(line => Number(line.split(': ')[1]))
    var I = instr.split(': ')[1].split(',').map(Number);
    return { A, B, C, I };
}

function* computer(a, b, c, I) {
    var A = a;
    var B = b;
    var C = c;
    var combo = (op) => {
        if (op < 4) return op;
        if (op === 4) return A;
        if (op === 5) return B;
        if (op === 6) return C;
        throw new Error("Invalid operand.", op);
    }

    var operations = [
        function adv(op) { A = Math.floor(A / Math.pow(2, combo(op))) },
        function bxl(op) { B = B ^ op },
        function bst(op) { B = combo(op) % 8 },
        function jnz(op) { if (A !== 0) { pointer = op; return true; } },
        function bxc() { B = B ^ C },
        function out(op) { return combo(op) % 8 },
        function bdv(op) { B = Math.floor(A / Math.pow(2, combo(op))) },
        function cdv(op) { C = Math.floor(A / Math.pow(2, combo(op))) },
    ]

    var pointer = 0;
    while (pointer < I.length) {
        let instr = I[pointer];
        let operand = I[pointer + 1];
        let result = operations[instr](operand);
        //console.log(pointer, instr, operand, result);
        //console.log(A, B, C);
        if (instr === 5) yield result;
        if (result !== true) pointer += 2; // not if jnz returns true;
    }
}





// 7. [5,5] B % 8 = 2 ==> B = 2, 10, 18, 26, ...
// 6. [0,3] A = A / 8
// 5. [1,4] B = B ^ 4 ==> B = 6, 14, 22, 30, ...
// 4. [4,7] B = B ^ C ==> 
// 3. [7,5] C = A / 2 pow B
// 2. [1,1] B = B ^ 1
// 1. [2,4] B = A % 8


// 16 * 3 bits = 48 bits

// 140737488355328
//  70368744180000 etta p√• bit 46

var { A, B, C, I } = getData(PUZZLE_INPUT_PATH)(parser);
var c = computer(A, B, C, I);

console.log('Part 1:', [...c].join(','));

function findA() {
    var facit = I.join(',');
    for (let j = 0; j < 8589934591; j++) {
        let x = parseInt('101110000000110' + j.toString(2).padStart(33, '0'));
        c = computer(x, B, C, I);
        let str = [...c].join(',');
        console.log(j, str);
        if (str === facit) return x;
    }
}


// console.log('Part 2:', findA());

//   2,  4,  1,  1,  7,  5,  4,  7,  1,  4,  0,  3,  5,  5,  3,  0

//   0,  3,  5,  5,  3,  0,  4,  1,  7,  4,  5,  7,  1,  1,  4,  2
// 101,110,000,000,110,101,001,100,010,001,000,010,100,100,001,111



// 0. 000 -> 101 5. +5
// 1. 001 -> 100 4. +3 reverse
// 2. 010 -> 111 7. +5
// 3. 011 -> 110 6. +3 reverse
// 4. 100 -> ... 001 1. +5
// 5. 101 -> 000/001 0./1.
// 6. 110 -> 011 3. +5 reverse
// 7. 111 -> 010 2. +3


for (let j = 0; j < 100; j++) {
    c = computer(j, B, C, I);
    console.log(j, [...c].join(','));
}


var a = parseInt('101010'.padEnd(48, '0'), 2);
console.log(a);
console.log([...computer(a, B, C, I)].join(','));

// 8.589.934.591



/*
function findA(out) {
    var a = 1;
    var first = null;
    while (true) {
        let c = computer(a, B, C, I);
        if (c.next().value === out) {
            return a;
        }
        a++;
    }
}

console.log(I);
var arr = I.map(i => findA(i));
console.log(arr);
console.log(lcmOfArray(arr));
*/







/*

var lastA = 0;


var dAs = [
    8796093022208,
    26388279066624,
    8796093022208,
    237494511599616,
];

// var c1 = computer(16777211, B, C, I);
// console.log([...c1].join(','));


function findA() {
    var a = 8769761629448751;
    var x = 0; // mod 4 
    var longest = 0;
    while (true) {
        let c = computer(a, B, C, I);
        let i = [];
        let j = 0;
        let brk = false;
        for (let value of c) {
            if (j >= I.length || value !== I[j]) {
                brk = true;
                break;
            }
            i.push(value);
            j++;
            // if (i.length === 7 && value === 4) {
            //     console.log(a, a - lastA);
            //     lastA = a;
            // }
            if (i.length >= longest) {
                console.log(a, i);
                longest = i.length;
            }
        }
        if (brk || i.length !== I.length) {
            // if (x % 1000000 === 0) console.log(a);
            // a = a + dAs[x % 4];
            // x++;
            a++;
        } else {
            console.log(i);
            return a;
        }
    }
}

console.log('Part 2:', findA());

// 86.460.382.909 to low
// 428.544.191.678 to low
// 47.476.021.000.000 to low
// 2.014.362.188.393.007
// 4.266.162.002.078.255
//

*/
/*

var a1 = 5629556420520495;
var a2 = 5638352513542703;
var a3 = 5664740792609327;
var a4 = 5673536885631535;

var d1 = a2 - a1;
var d2 = a3 - a2;
var d3 = a4 - a3;

console.log(d1, d2, d3);


var b1 = 6755456327363119
var b2 = 6764252420385327
var b3 = 6790640699451951
var b4 = 6799436792474159
var b5 = 7036931304073775
var b6 = 7045727397095983
var b7 = 7072115676162607
var b8 = 7080911769184815

var arr = [b1, b2, b3, b4, b5, b6, b7, b8];
arr.forEach((e, i) => {
    if (i > 0) console.log(e - arr[i - 1]);
});
*/



























